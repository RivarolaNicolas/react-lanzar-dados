{"version":3,"sources":["components/Dado.js","components/TirarDados.js","App.js","serviceWorker.js","index.js"],"names":["Dado","className","this","props","dado","tirando","Component","TirarDados","state","dado1","dado2","obtenerDadosAlAzarYMostrarlos","bind","nuevoDado1","dados","Math","floor","random","length","nuevoDado2","setState","setTimeout","clase","onClick","disabled","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAGqBA,G,6KAEjB,OACE,yBAAKC,UAAU,QACb,uBAAGA,UAAS,UAAKC,KAAKC,MAAMC,KAAhB,YAAwBF,KAAKC,MAAME,SAAW,kB,GAJhCC,cCCbC,G,wDACnB,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAEDK,MAAQ,CACXH,SAAS,EACTI,MAAO,kBACPC,MAAO,mBAET,EAAKC,8BAAgC,EAAKA,8BAA8BC,KAAnC,gBARpB,E,4EAqBc,IAAD,OACxBC,EAAaX,KAAKC,MAAMW,MAAMC,KAAKC,MAAMD,KAAKE,SAAWf,KAAKC,MAAMW,MAAMI,SAC1EC,EAAajB,KAAKC,MAAMW,MAAMC,KAAKC,MAAMD,KAAKE,SAAWf,KAAKC,MAAMW,MAAMI,SAChFhB,KAAKkB,SAAS,CAAEX,MAAOI,EAAYH,MAAOS,EAAYd,SAAS,IAC/DgB,YAAW,WACT,EAAKD,SAAS,CAAEf,SAAS,MACxB,O,+BAGH,OACE,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAMG,KAAMF,KAAKM,MAAMC,MAAMa,OAASpB,KAAKM,MAAMC,MAAOJ,QAASH,KAAKM,MAAMH,UAC5E,kBAAC,EAAD,CAAMD,KAAMF,KAAKM,MAAME,MAAMY,OAASpB,KAAKM,MAAMC,MAAOJ,QAASH,KAAKM,MAAMH,WAE9E,4BAAQkB,QAASrB,KAAKS,8BAA+Ba,SAAUtB,KAAKM,MAAMH,SACvEH,KAAKM,MAAMH,QAAU,aAAe,wB,GAtCPC,cAAnBC,EAYZkB,aAAe,CACpBX,MAAO,CACL,CAAEQ,MAAO,mBACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,qBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,qBCVAI,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCIc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.913adca1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/Dado.css';\r\n\r\nexport default class Dado extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"dado\">\r\n        <i className={`${this.props.dado} ${this.props.tirando && 'shaking'}`}></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Dado from './Dado';\r\nimport '../styles/TirarDados.css';\r\n\r\nexport default class TirarDados extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tirando: false,\r\n      dado1: 'fas fa-dice-one',\r\n      dado2: 'fas fa-dice-one',\r\n    };\r\n    this.obtenerDadosAlAzarYMostrarlos = this.obtenerDadosAlAzarYMostrarlos.bind(this);\r\n  }\r\n\r\n  static defaultProps = {\r\n    dados: [\r\n      { clase: 'fas fa-dice-one' },\r\n      { clase: 'fas fa-dice-two' },\r\n      { clase: 'fas fa-dice-three' },\r\n      { clase: 'fas fa-dice-four' },\r\n      { clase: 'fas fa-dice-five' },\r\n      { clase: 'fas fa-dice-six' },\r\n    ],\r\n  };\r\n  obtenerDadosAlAzarYMostrarlos() {\r\n    const nuevoDado1 = this.props.dados[Math.floor(Math.random() * this.props.dados.length)];\r\n    const nuevoDado2 = this.props.dados[Math.floor(Math.random() * this.props.dados.length)];\r\n    this.setState({ dado1: nuevoDado1, dado2: nuevoDado2, tirando: true });\r\n    setTimeout(() => {\r\n      this.setState({ tirando: false });\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"tirarDados\">\r\n        <div className=\"tirarDados-container\">\r\n          <Dado dado={this.state.dado1.clase || this.state.dado1} tirando={this.state.tirando} />\r\n          <Dado dado={this.state.dado2.clase || this.state.dado1} tirando={this.state.tirando} />\r\n        </div>\r\n        <button onClick={this.obtenerDadosAlAzarYMostrarlos} disabled={this.state.tirando}>\r\n          {this.state.tirando ? 'Tirando...' : 'Tira los dados!'}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Dice from './components/TirarDados';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Dice />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}